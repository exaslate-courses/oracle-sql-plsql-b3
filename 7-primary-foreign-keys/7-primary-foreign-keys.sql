-- Create sequence.
CREATE SEQUENCE auto_increment MINVALUE 1 MAXVALUE 999999999 START WITH 1 INCREMENT BY 1 CACHE 100;
/

-- Create toy_manufacturer table.
DROP TABLE TOY_MANUFACTURER;

hr.toy_manufacturer.id

CREATE TABLE TOY_MANUFACTURER(
    ID  NUMBER DEFAULT ORA_HASH(auto_increment.nextval) NOT NULL,
    NAME VARCHAR2(100),
    CREATED_DATE TIMESTAMP(6) DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    MODIFIED_DATE TIMESTAMP(6) DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    CONSTRAINT TOY_MANUFACTUERER_ID_PK PRIMARY KEY(ID)
);
/

INSERT INTO TOY_MANUFACTURER(NAME) VALUES('Lego');
INSERT INTO TOY_MANUFACTURER(NAME) VALUES('Mattel');
INSERT INTO TOY_MANUFACTURER(NAME) VALUES('Hasbro');

-- Create toy_customer.
CREATE TABLE TOY_CUSTOMER(
    ID  NUMBER DEFAULT ORA_HASH(auto_increment.nextval) NOT NULL,
    FIRST_NAME VARCHAR2(100),
    LAST_NAME VARCHAR2(100),
    CREATED_DATE TIMESTAMP(6) DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    MODIFIED_DATE TIMESTAMP(6) DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    CONSTRAINT TOY_CUSTOMER_ID_PK PRIMARY KEY(ID)
);
/

INSERT INTO TOY_CUSTOMER(FIRST_NAME, LAST_NAME) VALUES('Ryan', 'Gosling');
INSERT INTO TOY_CUSTOMER(FIRST_NAME, LAST_NAME) VALUES('Will', 'Ferrel');
INSERT INTO TOY_CUSTOMER(FIRST_NAME, LAST_NAME) VALUES('Margot', 'Robbie');

select * from hr.toy_customer;

-- Create toy_inventory.
CREATE TABLE TOY_INVENTORY(
    ID  NUMBER DEFAULT ORA_HASH(auto_increment.nextval) NOT NULL,
    MANUFACTURER_ID NUMBER NOT NULL,
    NUM_AVAILABLE NUMBER,
    CREATED_DATE TIMESTAMP(6) DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    MODIFIED_DATE TIMESTAMP(6) DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    CONSTRAINT TOY_INVENTORY_ID_PK PRIMARY KEY(ID),
    CONSTRAINT TOY_INVENTORY_MANUFACTURER_ID_FK FOREIGN KEY(MANUFACTURER_ID) REFERENCES HR.TOY_MANUFACTURER(ID)
);
/

INSERT INTO HR.TOY_INVENTORY(MANUFACTURER_ID, NUM_AVAILABLE) VALUES(3217185531, 10);
INSERT INTO HR.TOY_INVENTORY(MANUFACTURER_ID, NUM_AVAILABLE) VALUES(3217185531, 3);
INSERT INTO HR.TOY_INVENTORY(MANUFACTURER_ID, NUM_AVAILABLE) VALUES(365452098, 5);

select * from hr.toy_manufacturer;
select * from hr.toy_inventory;

-- Create toy_sales.
CREATE TABLE TOY_SALES(
    ID  NUMBER DEFAULT ORA_HASH(auto_increment.nextval) NOT NULL,
    TOY_ID NUMBER NOT NULL,
    CUSTOMER_ID NUMBER NOT NULL,
    QUANTITY NUMBER,
    PRICE NUMBER,
    CREATED_DATE TIMESTAMP(6) DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    MODIFIED_DATE TIMESTAMP(6) DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    CONSTRAINT TOY_SALES_ID_PK PRIMARY KEY(ID),
    CONSTRAINT TOY_SALES_TOY_ID_FK FOREIGN KEY(TOY_ID) REFERENCES TOY_INVENTORY(ID),
    CONSTRAINT TOY_SALES_CUSTOMER_ID_FK FOREIGN KEY(CUSTOMER_ID) REFERENCES TOY_CUSTOMER(ID)
);

INSERT INTO TOY_SALES(TOY_ID, CUSTOMER_ID, QUANTITY, PRICE) VALUES(<>, <>, 1, 12.99);
INSERT INTO TOY_SALES(TOY_ID, CUSTOMER_ID, QUANTITY, PRICE) VALUES(<>, <>, 4, 50);
INSERT INTO TOY_SALES(TOY_ID, CUSTOMER_ID, QUANTITY, PRICE) VALUES(<>, <>, 3, 30);
/

-- toy_distributor_management.
CREATE TABLE TOY_DISTRIBUTOR_MANAGEMENT(
    ID NUMBER DEFAULT ORA_HASH(auto_increment.nextval) NOT NULL,
    FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50),
    TITLE_ABBR VARCHAR2(5) NOT NULL,
    SALARY NUMBER,
    CONSTRAINT TOY_DISTRIBUTOR_MANAGEMENT_ID_PK PRIMARY KEY(ID),
    CONSTRAINT TOY_DISTRIBUTOR_MANAGEMENT_TITLE_ABBR_C CHECK(TITLE_ABBR IN ('CEO', 'CTO', 'CFO', 'COO', 'EVP', 'VP', 'GM', 'MGR', 'DEV', 'REP', 'DRI'))
);
/

CREATE TABLE AUDIT_TOY_INVENTORY(
    ID NUMBER DEFAULT ORA_HASH(auto_increment.nextval) NOT NULL,
    TOY_INVENTORY_ID NUMBER NOT NULL,
    OPERATION CHAR(1),
    CONSTRAINT AUDIT_TOY_INVENTORY_OPERATION_C CHECK(OPERATION IN ('I', 'U', 'D'))
);
/

CREATE OR REPLACE TRIGGER TRG_AUDIT_TOY_INVENTORY
BEFORE INSERT OR UPDATE OR DELETE ON TOY_INVENTORY
FOR EACH ROW
DECLARE
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDIT_TOY_INVENTORY(TOY_INVENTORY_ID, OPERATION) VALUES(:NEW.ID, 'I');
    END IF;

    IF UPDATING THEN
        INSERT INTO AUDIT_TOY_INVENTORY(TOY_INVENTORY_ID, OPERATION) VALUES(:NEW.ID, 'U');
    END IF;

    IF DELETING THEN
        INSERT INTO AUDIT_TOY_INVENTORY(TOY_INVENTORY_ID, OPERATION) VALUES(:OLD.ID, 'D');
    END IF;
END;
/

